3-Here are some test cases for the 5 higher-order functions:
sort_by:
def test_sort_by():
    lst1 = [3, 1, 4, 1, 5, 9]
    assert sort_by(lst1, lambda x: -x) == [9, 5, 4, 3, 1, 1]

    lst2 = []
    assert sort_by(lst2, lambda x: -x) == []

    lst3 = [1]
    assert sort_by(lst3, lambda x: -x) == [1]

    lst4 = ["ccc", "aa", "dddd", "bb"]
    assert sort_by(lst4, lambda x: len(x)) == ["dddd", "ccc", "aa", "bb"]

memoize:
def test_memoize():
    def expensive_function(x):
        print(f"Computing {x}...")
        return x * x

    memoized_function = memoize(expensive_function)

    assert memoized_function(5) == 25
    assert memoized_function(5) == 25  # should return cached result

    assert memoized_function(6) == 36
    assert memoized_function(6) == 36  # should return cached result

partial:
def test_partial():
    def add(x, y):
        return x + y

    add_one = partial(add, 1)

    assert add_one(2) == 3
    assert add_one(3) == 4

zip_with:
def test_zip_with():
    lst1 = [1, 2, 3]
    lst2 = [4, 5, 6]

    assert zip_with(lst1, lst2, lambda x, y: x + y) == [5, 7, 9]
    assert zip_with(lst1, lst2, lambda x, y: x * y) == [4, 10, 18]

    lst3 = []
    lst4 = [1, 2, 3]

    assert zip_with(lst3, lst4, lambda x, y: x + y) == []
    assert zip_with(lst4, lst3, lambda x, y: x + y) == []

curry:
def test_curry():
    def add(x, y):
        return x + y

    curried_add = curry(add)

    assert curried_add(1)(2) == 3
    assert curried_add(1, 2) == 3

    def mul(x, y, z):
        return x * y * z

    curried_mul = curry(mul)

    assert curried_mul(2)(3)(4) == 24
    assert curried_mul(2, 3)(4) == 24
    assert curried_mul(2)(3, 4) == 24
    assert curried_mul(2, 3, 4) == 24